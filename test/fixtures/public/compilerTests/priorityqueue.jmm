import Quicksort;
import Quicksort.quicksort(int[]) boolean;
import static ioOwn.printQueueMenu() void;
import static ioOwn.requestPersonAge() int;
import static ioPlus.requestNumber() int;
import static io.print(int) void;
import static io.println() void;

class PriorityQueue {

    int[] queue;
    int maxQueueSize;
    int currentSize;

    int printOption;
    int addOption;
    int prioritizeOption;
    int exitOption;

    public static void main(String[] args) {
        new PriorityQueue().start(20);
    }

    public void start(int size) {
        int userOption;

        this.initQueue(size);
        this.initMacros();

        userOption = this.getOption();

        while(!this.equals(userOption, exitOption)) {
            this.handleRequest(userOption);
            userOption = this.getOption();
        }
    }

    public void handleRequest(int userOption) {
        int age;
        if(this.equals(userOption, printOption))
            this.printQueue();
        else if(this.equals(userOption, addOption)) {
            age = ioOwn.requestPersonAge();
            this.addPersonQueue(age);
        }
        else if (this.equals(userOption, prioritizeOption))
            this.prioritize();
        else {}
    }

    public int getOption() {
        ioOwn.printQueueMenu();
        return ioPlus.requestNumber();
    }

    public void initMacros() {
        printOption = 1;
        addOption = 2;
        prioritizeOption = 3;
        exitOption = 0;
    }

    public void initQueue(int size) {
        maxQueueSize = size;
        queue = new int[maxQueueSize];
        currentSize = 0;
    }

    public int[] getQueue() {
        return queue;
    }

    public void switchPlaces(int place1, int place2) {
        int temp;
        temp = this.getQueue()[place1];
        this.getQueue()[place1] = this.getQueue()[place2];
        this.getQueue()[place2] = temp;
    }

    public void prioritize() {
        Quicksort sort;
        sort = new Quicksort();
        sort.quicksort(queue);
    }

    public void addPersonQueue(int age) {
        this.getQueue()[currentSize] = age;
        currentSize = currentSize + 1;
    }

    public boolean equals(int a, int b) {
        return !(a < b) && !(b < a);
    }

    public void printQueue() {
        int i;
        i = 0;

        while (i < this.getQueue().length) {
            io.print(queue[i]);
            io.println();
            i = i + 1;
        }
    }

}