options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(jmm)

public class jmm
{
    public static void main(String args[]) throws ParseException {
        //Creation of File Reader Object, that will be used to read text from file
        //The file is passed as argument (1st argument)
        FileReader fr;
        try {
            fr = new FileReader(args[0]);
        } catch (FileNotFoundException fnf) {
            System.out.println("File not Found.");
            return;
        }

        //All the text that the file has, will be stored here
        char [] fileText = new char[500];

        //Populates fileText variable with the text read
        try {
            fr.read(fileText);
        } catch (IOException ioe) {
            System.out.println("Failed to read from file");
            return;
        }

        //Prints everything that was read
        System.out.println("\t====== File Read ======");

        for(char c : fileText)
            System.out.print(c);

        System.out.println("\t======================");

        jmm parser = new jmm(fileText);
        parser.Program();

    }
}

PARSER_END(jmm)

// Symbols that must be skipped during the lexical analysis
SKIP :
{
	" " | "\r" | "\t"
}

// token definition (terminal symbols)
TOKEN:
{
    < INT : (["0" - "9"])+ >
    | < LF : "\n" >
    | < PV : ";" >
    | <INT_ARR : <INT> "[" "]">
    | <BOOL : "true" | "false" >
    | <IDENTIFIER_CLASS : ["A" - "Z"](["A" - "Z"]|["a" - "z"])* >
    | <IDENTIFIER_VAR : (["A" - "Z"]|["a" - "z"])+ >
    | <IDENTIFIER : <IDENTIFIER_VAR> | <IDENTIFIER_CLASS>>
    | <TYPE : <INT_ARR> | <INT> | <BOOL> | <IDENTIFIER>>
    | <CLASS: "class">
    | <EXTENDS : "extends">
}

void Program(): {}
{
    ImportDeclaration() ClassDeclaration()
}

void ImportDeclaration(): {}
{

}

void ClassDeclaration(): {}
{
    <CLASS> <IDENTIFIER_CLASS>
    [ <EXTENDS> <IDENTIFIER_CLASS> ]
    <
}

void VarDeclaration(): {Token t1, t2;}
{
    //var = TYPE , IDENTIFIER, ';'
    t1= <TYPE> {
        System.out.println("Integer = "+t1.image);
    }
    t2=<IDENTIFIER> {
        System.out.println("Integer = "+t2.image);
    }
    <PV><LF>
}

void MethodDeclaration(): {}
{

}

void Type(): {}
{

}

void Statement(): {}
{

}

void Expression(): {}
{
   Expr1() <LF>  {return jjtThis;} // Java code inside brackets
}

void Expr1() #void: {}
{
   Expr2(1) [
   	("+" Expr2(1) #Add(2)
   	| "-" Expr2(1) #Sub(2)
   	)
   ]
}

void Expr2(int sign) #void: {} // 1: positive; -1: negative, because of the ‘-‘ unitary operator
{
   Expr3(sign)  [
   ("*" Expr3(1) #Mul(2) 
   | "/" Expr3(1) #Div(2)
   )
   
   ]
/*
   Expr3(sign) [
   ("*" #Mul(2)
   | "/" #Div(2)
   )
   Expr3(1)
   ]
   */
   
}

void Expr3(int sign) #void: {Token t;}
{
    t=<INT> {  jjtThis.val = sign *Integer.parseInt(t.image); } #Term
    | "-" Expr3(-1)
    | "(" Expr1() ")"
}
