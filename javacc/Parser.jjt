options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Parser)

   import java.io.*;
   public class Parser {

       public static int MAX_ERRORS = 10;
       public static int NUM_ERRORS = 0;
       public String filePath;

       public SimpleNode parseProgram(String filePath) throws Exception {
           Parser.NUM_ERRORS = 0;
           this.filePath = filePath;

           return this.Program();
       }

       public static boolean isStatementStart(Token t) {
           switch (t.kind) {
               case OPEN_BRACE:
               case IF:
               case WHILE:
               case IDENTIFIER:
               case DIGIT:
               case TRUE:
               case FALSE:
               case THIS:
               case NEW:
               case NOT:
               case OPEN_PARENTHESIS:
                   return true;
               default:
                   return false;
           }
       }

       public void printTokenErrorMessage(Token token) {
           int line = token.beginLine;
           int col = token.beginColumn;

           String errorMessage = "Syntax Error: Unexpected token \"" + token.image + "\" found at line " + line + ", column " + col + ":\n";

           try {
                FileInputStream fileStream = new FileInputStream(filePath);
                InputStreamReader inputStream = new InputStreamReader(fileStream);
                BufferedReader reader = new BufferedReader(inputStream);

                for (int i = 0; i < line - 1; i++)
                    reader.readLine();

                errorMessage += reader.readLine() + "\n";
                errorMessage = errorMessage.replaceAll("\t", " ");

            } catch(Exception e) {
                System.out.println("File not Found.");
                return;
            }

           for (int i = 0; i < col - 1; i++)
               errorMessage += " ";

           errorMessage += "^";

           System.out.println(errorMessage);
       }

       public void printUnclosedParenthesisErrorMessage(Token token) {
            this.printTokenErrorMessage(token);
            System.out.println("Forgot to close while condition parenthesis");
       }
   }

PARSER_END(Parser)

// Symbols that must be skipped during the lexical analysis
SKIP :
{
	" " | "\r" | "\t" | "\n" | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> |  <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

// token definition (terminal symbols)

//Types
TOKEN :
{
    <INT : "int">
    | <INT_ARR : "int[]">
    | <BOOL : "boolean">
    | <STRING : "String">
}

//Dedicated words
TOKEN :
{
    <CLASS : "class">
    | <EXTENDS : "extends">
    | <IMPORT : "import">
    | <PUBLIC : "public">
    | <RETURN : "return">
    | <STATIC : "static">
    | <VOID : "void">
    | <MAIN : "main">
    | <IF : "if">
    | <ELSE : "else">
    | <WHILE : "while">
    | <NEW : "new">
    | <THIS : "this">
    | <LENGTH : "length">
}

//Seperators
TOKEN :
{
    < PV : ";" >
    | <OPEN_BRACE: "{">
    | <CLOSE_BRACE: "}">
    | <OPEN_PARENTHESIS : "(">
    | <CLOSE_PARENTHESIS : ")">
    | <COMMA : ",">
	| <DOT : ".">
    | <OPEN_BRACKET : "[">
    | <CLOSE_BRACKET : "]">
}

//Operators
TOKEN :
{
    <NOT : "!">
    | <EQUALS : "=">
    | <LESS : "<">
    | <GREATER : ">">
    | <AND : "&&">
    | <MINUS : "-">
    | <PLUS : "+">
    | <MULT : "*">
    | <DIV : "/">
}

//Variables Values
TOKEN:
{
    <TRUE : "true">
    | <FALSE : "false">
    | <DIGIT : (["0"-"9"])+ >
    | <IDENTIFIER : (<LETTER>|<DOLLAR_SIGN>)(<LETTER>|<DOLLAR_SIGN>|<DIGIT>)* >  //Identifier is one or more letters, digits, and underscores, starting with a letter
    | <#DOLLAR_SIGN : "$">
    | <#LETTER : ["a"-"z", "A"-"Z", "_"]>
}

SimpleNode Program() #Start: {}
{
    ImportDeclaration()
    ClassDeclaration()
    {
        System.out.println(Parser.NUM_ERRORS + " errors encountered");
        if(Parser.NUM_ERRORS > 0){
            throw new ParseException();
        }

        return jjtThis;
    }
}

void ImportDeclaration() #void: {}
{
    (
        <IMPORT>
        ImpClass() #Import
        <PV>
    )*
}

void ImpClass() #void: {Token t1, t2;}
{
    (<STATIC> #Static(0))?
    t1=<IDENTIFIER>  {jjtThis.val = t1.image;} #ClassName(0)
    (
        ( <DOT> ImpFunc() ) #DotMethod(true)
        ( t2=ImportType() {jjtThis.val=t2.image;} #ReturnType(0) )?
    )?
}

void ImpFunc() #void: {Token t1, t2;}
{
    t1=<IDENTIFIER>  {jjtThis.val = t1.image;} #MethodName(0)
    <OPEN_PARENTHESIS>
    (
        t2=ImportType() {jjtThis.val=t2.image;} #ArgType(0)
        (
        <COMMA>
        t2=ImportType() {jjtThis.val=t2.image;} #ArgType(0)
        )*
    )?
    <CLOSE_PARENTHESIS>
}

Token ImportType() #void: {Token t1;}
{
    ( t1=<VOID> | t1=Type() )
    {return t1;}
}

// ############### CLASS DECLARATION #################
void ClassDeclaration() #Class: {Token t;}
{
    <CLASS> t=<IDENTIFIER>  {jjtThis.val = t.image;} #Identifier(0)
    [Extends()]
    ClassBody()
}

void Extends() #Extends(1): {Token t;}
{
    <EXTENDS> t=<IDENTIFIER>  {jjtThis.val = t.image;} #Identifier(0)
}

void ClassBody() #void: {}
{
    <OPEN_BRACE>
        (VarDeclaration())*
        (<PUBLIC> (MainMethod() | MethodDeclaration()) )*
    <CLOSE_BRACE>
}

// ############### VAR DECLARATION #################
void VarDeclaration() #VarDeclaration(2): {Token t1, t2;}
{
    t1=Type() {jjtThis.val = t1.image;} #Type(0)
    t2=<IDENTIFIER>  {jjtThis.val = t2.image;} #Identifier(0)
    <PV>
}

Token Type() #void: {Token t1;}
{
    (t1=<INT> | t1=<INT_ARR> | t1=<BOOL> | t1=<IDENTIFIER>)
    {return t1;}
}

// ############### MAIN METHOD #################
void MainMethod() #Main: {}
{
    <STATIC> <VOID> <MAIN>
    MainMethodArguments()
    MainMethodBody()
}

void MainMethodArguments() #void: {Token t;}
{
    <OPEN_PARENTHESIS>
        <STRING>
        <OPEN_BRACKET> <CLOSE_BRACKET>
        t=<IDENTIFIER>  {jjtThis.val = t.image;} #ArgumentName(0)
    <CLOSE_PARENTHESIS>
}

void MainMethodBody() #MethodBody: {}
{
    <OPEN_BRACE>
        MethodCode()
    <CLOSE_BRACE>
}

// ############### METHOD DECLARATION #################
void MethodDeclaration() #Method: {Token t1, t2;}
{
   t1=Type() {jjtThis.val = t1.image;} #ReturnType(0)
   t2=<IDENTIFIER>  {jjtThis.val = t2.image;} #Identifier(0)
   MethodArguments()
   MethodBody()
}

void MethodArguments() #void: {Token t1,t2,i1,i2;}
{
    <OPEN_PARENTHESIS>
        [
            (
                ArgumentDeclaration()
                (
                    <COMMA>
                    ArgumentDeclaration()
                )*
            ) #Args

        ]
    <CLOSE_PARENTHESIS>
}

void ArgumentDeclaration() #Arg(2): {Token t1, i1;}
{
    ( t1=Type() {jjtThis.val = t1.image;} ) #Type(0)
    ( i1=<IDENTIFIER> {jjtThis.val = i1.image;} ) #Identifier(0)
}

void MethodBody() #MethodBody: {}
{
    <OPEN_BRACE>
        MethodCode()
        ReturnExpression()
    <CLOSE_BRACE>
}

void MethodCode() #void: {}
{
    (LOOKAHEAD(2) VarDeclaration())*
    (Statement())*
}

void ReturnExpression() #void: {}
{
    <RETURN> Expression() #Return(1) <PV>
}

// ############### STATEMENT #################
void Statement() #void: {}
{
    ( <OPEN_BRACE> (Statement())* <CLOSE_BRACE> )
    | <IF> IfStatement()
    | <WHILE> WhileStatement()
    | IdentifierOptions()
}

void IfStatement() #If: {}
{
    <OPEN_PARENTHESIS>
        Expression()
    <CLOSE_PARENTHESIS>
        Statement() #Block
    <ELSE>
        Statement() #Else
}

void WhileStatement() #While: {}
{
     <OPEN_PARENTHESIS>
     try {
            Expression()
            <CLOSE_PARENTHESIS>
     } catch(ParseException e) {
            boolean expressionError = true;
            Token errorToken = getToken(0);

           Token t;
           Parser.NUM_ERRORS++;

           if (Parser.NUM_ERRORS == Parser.MAX_ERRORS){
               System.out.println("Reached max number of errors, aborting");
               throw new ParseException();
           }

           do {
                t = getNextToken();

                if (t.kind == CLOSE_PARENTHESIS) {
                    Token t1 = getToken(1);

                    if (Parser.isStatementStart(t1)) {
                        expressionError = false;
                        break;
                    }

                }
           }
           while (t.kind != OPEN_BRACE && t.kind != 0);

            if (!expressionError) {
                printTokenErrorMessage(errorToken);
            }
            else {
                printUnclosedParenthesisErrorMessage(errorToken);
            }
     }
     Statement() #Block
}

void IdentifierOptions() #void: {}
{
    LOOKAHEAD(2)
    Assignment()
    | Expression() (<PV>)?
}

void Assignment() #void: {Token t;}
{
    t=<IDENTIFIER> {jjtThis.val = t.image;} #Identifier
    Assignment1()
}

void Assignment1() #void: {Token t;}
{
    <EQUALS>
    Expression() #Assignment(2)
     <PV>
}

// ############### EXPRESSION #################
void Expression() #void: {}
{
    AndExpression()
    | <NOT> Expression() #Not(1)
}

void AndExpression() #void: {}
{
    LessExpression()
    ( <AND> Expression() #And(2))?
}

void LessExpression() #void: {}
{
    AddSubExpression()
    ( <LESS> AddSubExpression() #Less(2) )?
}

void AddSubExpression() #void: {}
{
    MultDivExpression()
    (
        <PLUS> MultDivExpression() #Add(2)
        | <MINUS> MultDivExpression() #Sub(2)
    )*
}

void MultDivExpression() #void: {}
{
    BracketExpression()
    (
        <MULT> BracketExpression() #Mul(2)
        | <DIV> BracketExpression() #Div(2)
    )*
}

void BracketExpression() #void: {}
{
    DotExpression()
    (
        <OPEN_BRACKET>
            Expression() #ArrayAccess(2)
        <CLOSE_BRACKET>
        [Assignment1()]
    )*
}

void DotExpression() #void: {}
{
    Values()
    (<DOT> DotFunc() #DotMethod(2))*
}

void Values() #void: {Token t;} // simpler expressions
{
	t=<DIGIT>  {jjtThis.val = t.image;} #Int
	| t=<IDENTIFIER> {jjtThis.val = t.image;} #Identifier
	| t=<TRUE> {jjtThis.val = t.image;} #Boolean
	| t=<FALSE> {jjtThis.val = t.image;} #Boolean
	| t=<THIS> {jjtThis.val = t.image;} #This
	| <NEW> NewFunc()
	| ( <OPEN_PARENTHESIS> Expression() <CLOSE_PARENTHESIS> )
}

void NewFunc() #New(1): {Token t;} //new within expression
{
    ( <INT> <OPEN_BRACKET>
     Expression() #ArraySize(1)
     <CLOSE_BRACKET> )
    | ( t=<IDENTIFIER>  {jjtThis.val = t.image;} #Identifier(0)
     <OPEN_PARENTHESIS> <CLOSE_PARENTHESIS> )
}

void DotFunc() #void: {Token t;}
{
    <LENGTH> #Length(0)
    | (t=<IDENTIFIER>  {jjtThis.val = t.image;} #MethodName(0) FuncArguments()) #MethodCall
}

void FuncArguments() #void: {}
{
    <OPEN_PARENTHESIS>
        [ ( Expression() (<COMMA> Expression() )* ) #Args]
    <CLOSE_PARENTHESIS>
}
