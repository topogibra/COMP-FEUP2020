options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(jmm)

import java.io.*;
public class jmm {
    public static void main(String args[]) throws ParseException {

        if (args.length != 1) {
            System.err.println("Usage: java jmm <file_name>");
            return;
        }

        //Reading file with InputStream
        //The file is passed as argument (1st argument)
        File file = new File(args[0]);
        InputStream input;

        try {
            input = new FileInputStream(file);
        } catch (FileNotFoundException e) {
            System.out.println("File not Found.");
            return;
        }

        jmm parser = new jmm(input);
        parser.Program();
    }
}

PARSER_END(jmm)

// Symbols that must be skipped during the lexical analysis
SKIP :
{
	" " | "\r" | "\t" | "\n"
}

// token definition (terminal symbols)

//Types
TOKEN :
{
    <INT : "int">
    | <INT_ARR : "int[]">
    | <BOOL : "boolean">
    | <STRING : "String">
}

//Dedicated words
TOKEN :
{
    <CLASS : "class">
    | <EXTENDS : "extends">
    | <IMPORT : "import">
    | <PUBLIC : "public">
    | <RETURN : "return">
    | <STATIC : "static">
    | <VOID : "void">
    | <MAIN : "main">
    | <IF : "if">
    | <ELSE : "else">
    | <WHILE : "while">
    | <NEW : "new">
    | <THIS : "this">
    | <LENGTH : "length">
}

//Seperators
TOKEN :
{
    < PV : ";" >
    | <OPEN_BRACE: "{">
    | <CLOSE_BRACE: "}">
    | <OPEN_PARENTHESIS : "(">
    | <CLOSE_PARENTHESIS : ")">
    | <COMMA : ",">
	| <DOT : ".">
    | <OPEN_BRACKET : "[">
    | <CLOSE_BRACKET : "]">
}

//Operators
TOKEN :
{
    <NOT : "!">
    | <EQUALS : "=">
    | <LESS : "<">
    | <GREATER : ">">
    | <AND : "&&">
    | <MINUS : "-">
    | <PLUS : "+">
    | <MULT : "*">
    | <DIV : "/">
}

//Variables Values
TOKEN:
{
    <TRUE : "true">
    | <FALSE : "false">
    | <DIGIT : (["0"-"9"])+ >
    | <LETTER : ["a"-"z", "A"-"Z", "_"]>
    | <IDENTIFIER : <LETTER>(<LETTER>|<DIGIT>)* >  //Identifier is one or more letters, digits, and underscores, starting with a letter
}

void Program() #void: {}
{
   (ClassDeclaration())+
}

void ImportDeclaration() #void: {}
{
    "import"
}

// ############### CLASS DECLARATION #################
void ClassDeclaration() #void: {Token t1;}
{
    <CLASS> t1=<IDENTIFIER> {System.out.println("[New Class] Class name: " + t1.image);}
    [Extends()]
    Class_Body()
}

void Extends() #void: {Token ident;}
{
    <EXTENDS> ident=<IDENTIFIER> {
    System.out.println("\t[Previous Class] Extends: " + ident.image);
    }
}

void Class_Body() #void: {}
{
    <OPEN_BRACE>
        (VarDeclaration())*
        (<PUBLIC> (MainMethod() | MethodDeclaration()) )*
    <CLOSE_BRACE>
}

// ############### VAR DECLARATION #################
void VarDeclaration() #void: {Token t1, t2;}
{
    t1=Type()
    t2=<IDENTIFIER> {
        System.out.println("[New Var] Type: " + t1.image + " Identifier: " + t2.image);
    }
    <PV>
}

Token Type() #void: {Token t1;}
{
    (t1=<INT> | t1=<INT_ARR> | t1=<BOOL> | t1=<IDENTIFIER> )
    {return t1;}
}

// ############### MAIN METHOD #################
void MainMethod() #void: {}
{
    <STATIC> <VOID> <MAIN> MainMethodArguments() MainMethodBody()
}

void MainMethodArguments() #void: {Token t1;}
{
    <OPEN_PARENTHESIS>
        <STRING>
        <OPEN_BRACKET> <CLOSE_BRACKET>
        t1=<IDENTIFIER> {System.out.println("Main argument: " + t1.image);}
    <CLOSE_PARENTHESIS>
}

void MainMethodBody() #void: {}
{
    <OPEN_BRACE>
        (VarDeclaration())* (Statement())*
    <CLOSE_BRACE>
}

// ############### METHOD DECLARATION #################
void MethodDeclaration() #void: {}
{
   Type() <IDENTIFIER>
   Method_Arguments()
   Method_Body()
}

void Method_Arguments() #void: {}
{
    <OPEN_PARENTHESIS>
        [Type() <IDENTIFIER> (<COMMA> Type() <IDENTIFIER>)*]
    <CLOSE_PARENTHESIS>
}

void Method_Body() #void: {}
{
    <OPEN_BRACE>
        (VarDeclaration())* (Statement())* ReturnExpression()
    <CLOSE_BRACE>
}

void ReturnExpression() #void: {}
{
    <RETURN> Expression() <PV>
}

// ############### STATEMENT #################
void Statement() #void: {Token t1;}
{
    <OPEN_BRACE> Statement() <CLOSE_BRACE>
    | <IF> <OPEN_PARENTHESIS> Expression() <CLOSE_PARENTHESIS> Statement() <ELSE> Statement()
    | <WHILE> <OPEN_PARENTHESIS> Expression() <CLOSE_PARENTHESIS> Statement()
    | t1=<IDENTIFIER> [ <OPEN_BRACKET> Expression() <CLOSE_BRACKET>] <EQUALS> {System.out.println("Assignment: " + t1.image);} Expression() <PV>
    | Expression() <PV>
}

// ############### EXPRESSION #################
void Expression() #void: {} // generic expression
{
    Values()
    (
        Operations()
        | <OPEN_BRACKET> Expression() <CLOSE_BRACKET>
        | DotFunc()
    )*
}

void Values() #void: {} // simpler expressions
{
	<DIGIT>
	| <TRUE>
	| <FALSE>
	| <THIS>
	| <IDENTIFIER>
	| NewFunc()
	| <NOT> Expression()
	| <OPEN_PARENTHESIS> Expression() <CLOSE_PARENTHESIS>
}

void NewFunc() #void: {} //new within expression
{
	<NEW>
	(
	    <INT> <OPEN_BRACKET> Expression() <CLOSE_BRACKET>
	    | <IDENTIFIER> <OPEN_PARENTHESIS> <CLOSE_PARENTHESIS>
	)
}

void Operations() #void: {}
{
    <AND> Expression() #And(2)
    | <LESS> Expression() #Lss(2)
    | <GREATER> Expression() #Gtr(2)
    | <MINUS> Expression() #Sub(2)
    | <PLUS> Expression() #Add(2)
    | <MULT> Expression() #Mul(2)
    | <DIV> Expression() #Div(2)
}

void DotFunc() #void: {}
{
    <DOT>
    (
        <LENGTH>
        | <IDENTIFIER> FuncArguments()
    )
}

void FuncArguments() #void: {}
{
    <OPEN_PARENTHESIS>
        [ Values() (<COMMA> Values() )* ]
    <CLOSE_PARENTHESIS>
}
