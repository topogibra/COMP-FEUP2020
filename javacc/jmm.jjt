options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(jmm)

   import java.io.*;
   public class jmm {

       public static int MAX_ERRORS = 100;
       public static int NUM_ERRORS = 0;
       public String filePath;

       public void parseProgram(String filePath) throws ParseException {
           jmm.NUM_ERRORS = 0;
           this.filePath = filePath;

           SimpleNode root = this.Program();
           root.dump("");
       }

       public static boolean isStatementStart(Token t) {
           switch (t.kind) {
               case OPEN_BRACE:
               case IF:
               case WHILE:
               case IDENTIFIER:
               case DIGIT:
               case TRUE:
               case FALSE:
               case THIS:
               case NEW:
               case NOT:
               case OPEN_PARENTHESIS:
                   return true;
               default:
                   return false;
           }
       }

       public void printTokenErrorMessage(Token token) {
           int line = token.beginLine;
           int col = token.beginColumn;

           String errorMessage = "Syntax Error: Unexpected token " + token.image + " found at line " + line + ", column " + col + ":\n";

           try {
                FileInputStream fileStream = new FileInputStream(filePath);
                InputStreamReader inputStream = new InputStreamReader(fileStream);
                BufferedReader reader = new BufferedReader(inputStream);

                for (int i = 0; i < line - 1; i++)
                    reader.readLine();

                errorMessage += reader.readLine() + "\n";
                errorMessage = errorMessage.replaceAll("\t", " ");

            } catch(Exception e) {
                System.out.println("File not Found.");
                return;
            }

           for (int i = 0; i < col; i++)
               errorMessage += " ";

           errorMessage += "^";

           System.out.println(errorMessage);
       }

       public void printUnclosedParenthesisErrorMessage(Token token) {
            this.printTokenErrorMessage(token);
            System.out.println("Forgot to close while condition parenthesis");
       }

       public static void main(String args[]) throws ParseException {

           if (args.length != 1) {
               System.err.println("Usage: java jmm <file_name>");
               return;
           }

           //Reading file with InputStream
           //The file is passed as argument (1st argument)
           File file = new File(args[0]);
           InputStream input;

           try {
               input = new FileInputStream(file);
           } catch (FileNotFoundException e) {
               System.out.println("File not Found.");
               return;
           }

           jmm parser = new jmm(input);
           parser.parseProgram(args[0]);
       }
   }

PARSER_END(jmm)

// Symbols that must be skipped during the lexical analysis
SKIP :
{
	" " | "\r" | "\t" | "\n" | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> |  <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

// token definition (terminal symbols)

//Types
TOKEN :
{
    <INT : "int">
    | <INT_ARR : "int[]">
    | <BOOL : "boolean">
    | <STRING : "String">
}

//Dedicated words
TOKEN :
{
    <CLASS : "class">
    | <EXTENDS : "extends">
    | <IMPORT : "import">
    | <PUBLIC : "public">
    | <RETURN : "return">
    | <STATIC : "static">
    | <VOID : "void">
    | <MAIN : "main">
    | <IF : "if">
    | <ELSE : "else">
    | <WHILE : "while">
    | <NEW : "new">
    | <THIS : "this">
    | <LENGTH : "length">
}

//Seperators
TOKEN :
{
    < PV : ";" >
    | <OPEN_BRACE: "{">
    | <CLOSE_BRACE: "}">
    | <OPEN_PARENTHESIS : "(">
    | <CLOSE_PARENTHESIS : ")">
    | <COMMA : ",">
	| <DOT : ".">
    | <OPEN_BRACKET : "[">
    | <CLOSE_BRACKET : "]">
}

//Operators
TOKEN :
{
    <NOT : "!">
    | <EQUALS : "=">
    | <LESS : "<">
    | <GREATER : ">">
    | <AND : "&&">
    | <MINUS : "-">
    | <PLUS : "+">
    | <MULT : "*">
    | <DIV : "/">
}

//Variables Values
TOKEN:
{
    <TRUE : "true">
    | <FALSE : "false">
    | <DIGIT : (["0"-"9"])+ >
    | <IDENTIFIER : (<LETTER>|<DOLLAR_SIGN>)(<LETTER>|<DOLLAR_SIGN>|<DIGIT>)* >  //Identifier is one or more letters, digits, and underscores, starting with a letter
    | <#DOLLAR_SIGN : "$">
    | <#LETTER : ["a"-"z", "A"-"Z", "_"]>
}

SimpleNode Program() #Start: {}
{
    /* ImportDeclaration()
    ClassDeclaration() */
    (Statement())*
    {
        System.out.println(jmm.NUM_ERRORS + " errors encountered");
        if(jmm.NUM_ERRORS > 0){
            throw new ParseException();
        }

        return jjtThis;
    }
}

void ImportDeclaration() #void: {}
{
    (
        <IMPORT>
        ImpClass()
        <PV>
    )*
}

void ImpClass() #void: {}
{
    (<STATIC>)?
    <IDENTIFIER>
    (
        <DOT> ImpFunc()
        (Type() | <VOID> )?
    )?
}

void ImpFunc() #void: {}
{
    <IDENTIFIER>
    <OPEN_PARENTHESIS>
    (
        ImportType()
        (
        <COMMA>
        ImportType()
        )*
    )?
    <CLOSE_PARENTHESIS>
}

void ImportType() #void: {}
{
    <VOID> | Type()
}

// ############### CLASS DECLARATION #################
void ClassDeclaration() #void: {Token t1;}
{
    <CLASS> t1=<IDENTIFIER> #Class(2)
    [Extends()]
    ClassBody()
}

void Extends() #void: {Token ident;}
{
    <EXTENDS> ident=<IDENTIFIER>
}

void ClassBody() #void: {}
{
    <OPEN_BRACE>
        (VarDeclaration())*
        (<PUBLIC> (MainMethod() | MethodDeclaration()) )*
    <CLOSE_BRACE>
}

// ############### VAR DECLARATION #################
void VarDeclaration() #void: {Token t1;}
{
    ( t1=Type() | t1=<IDENTIFIER> )
    VarDeclaration1(t1)
}

void VarDeclaration1(Token t1) #void: {Token t2;}
{
    t2=<IDENTIFIER>
    <PV>
}

Token Type() #void: {Token t1;}
{
    (t1=<INT> | t1=<INT_ARR> | t1=<BOOL>)
    {return t1;}
}

// ############### MAIN METHOD #################
void MainMethod() #void: {}
{
    <STATIC> <VOID> <MAIN> MainMethodArguments() MainMethodBody()
}

void MainMethodArguments() #void: {Token t1;}
{
    <OPEN_PARENTHESIS>
        <STRING>
        <OPEN_BRACKET> <CLOSE_BRACKET>
        t1=<IDENTIFIER>
    <CLOSE_PARENTHESIS>
}

void MainMethodBody() #void: {}
{
    <OPEN_BRACE>
        MethodCode()
    <CLOSE_BRACE>
}

// ############### METHOD DECLARATION #################
void MethodDeclaration() #void: {Token t1, t2;}
{
   t1=Type() t2=<IDENTIFIER>
   MethodArguments()
   MethodBody()
}

void MethodArguments() #void: {}
{
    <OPEN_PARENTHESIS>
        [Type() <IDENTIFIER> (<COMMA> Type() <IDENTIFIER>)*]
    <CLOSE_PARENTHESIS>
}

void MethodBody() #void: {}
{
    <OPEN_BRACE>
        (MethodCode())?
        ReturnExpression()
    <CLOSE_BRACE>
}

void MethodCode() #void: {Token t1;}
{
    t1=Type() VarDeclaration1(t1) MethodCode()
    | ( t1=<IDENTIFIER> (
        MethodCode2(t1)
        | ( VarDeclaration1(t1) MethodCode() )
       )
    )
    | ( Statement1() (Statement())*)
}

void MethodCode2(Token t1) #void: {}
{
    IdentifierOptions(t1)
    (Statement())*
}

void IdentifierOptions(Token t1) #void: {}
{
    ( Array() [Assignment1(t1)] ) //Last option of Statement and 2nd option of expression
    | Assignment1(t1)
    | ( <DOT> DotFunc() (<PV>)?)
    | <PV>
}

void ReturnExpression() #void: {}
{
    <RETURN> ExpressionIdentifier() <PV>
}

// ############### STATEMENT #################
void Statement() #void: {Token t1;}
{
    Statement1()
    | ( t1=<IDENTIFIER> IdentifierOptions(t1) )
}

void Statement1() #void: {}
{
    ( <OPEN_BRACE> (Statement())* <CLOSE_BRACE> )
    | <IF> IfStatement()
    | <WHILE> WhileStatement()
    | ( Expression() <PV> )
}

void IfStatement() #If: {}
{
    <OPEN_PARENTHESIS>
        ExpressionIdentifier()
    <CLOSE_PARENTHESIS>
        Statement() #Block
    <ELSE>
        Statement() #Else
}

void WhileStatement() #While: {}
{
     <OPEN_PARENTHESIS>
     try {
            ExpressionIdentifier()
            <CLOSE_PARENTHESIS>
     } catch(ParseException e) {
            boolean expressionError = true;
            Token errorToken = getToken(0);

           Token t;
           jmm.NUM_ERRORS++;

           if(jmm.NUM_ERRORS == jmm.MAX_ERRORS){
               System.out.println("Reached max number of errors, aborting");
               throw new ParseException();
           }

           do {
                t = getNextToken();

                if (t.kind == CLOSE_PARENTHESIS) {
                    Token t1 = getToken(1);

                    if (jmm.isStatementStart(t1)) {
                        expressionError = false;
                        break;
                    }

                }
           }
           while (t.kind != OPEN_BRACE && t.kind != 0);

            if (!expressionError) {
                printTokenErrorMessage(errorToken);
            }
            else {
                printUnclosedParenthesisErrorMessage(errorToken);
            }
     }
     Statement() #Block
}

void Array() #void: {}
{
    <OPEN_BRACKET> ExpressionIdentifier() <CLOSE_BRACKET>
}

void Assignment1(Token t1) #void: {}
{
    <EQUALS>
    ExpressionIdentifier() #Assignment(2)
    <PV> #PV
}

// ############### EXPRESSION #################
void Expression() #void: {}
{
    <NOT>
    ExpressionIdentifier() #Not(1)
    |
    AndExpression()
}

void AndExpression() #void: {}
{
    LessExpression()
    ( <AND> ExpressionIdentifier() #And(2))?
}

void LessExpression() #void: {}
{
    AddSubExpression()
    ( <LESS> AddSubExpressionIdentifier() #Less(2) )?
}

void AddSubExpression() #void: {}
{
    MultDivExpression()
    (
        <PLUS> MultDivExpressionIdentifier() #Add(2)
        | <MINUS> MultDivExpressionIdentifier() #Sub(2)
    )*
}

void MultDivExpression() #void: {}
{
    BracketExpression()
    (
        <MULT> BracketExpressionIdentifier() #Mul(2)
        | <DIV> BracketExpressionIdentifier() #Div(2)
    )*
}

void BracketExpression() #void: {}
{
    DotExpression()
    (
        <OPEN_BRACKET>
            BracketExpressionIdentifier()
        <CLOSE_BRACKET>
    )?
}

void DotExpression() #void: {}
{
    Values()
    (<DOT> DotFunc() #Dot(2))?
}

void ExpressionIdentifier() #void: {}
{
     <NOT>
      ExpressionIdentifier() #Not(1)
     | AndExpressionIdentifier()
}

void AndExpressionIdentifier() #void: {}
{
     LessExpressionIdentifier()
    ( <AND> ExpressionIdentifier() #And(2))?
}

void LessExpressionIdentifier() #void: {}
{
    AddSubExpressionIdentifier()
    ( <LESS> AddSubExpressionIdentifier() #Less(2))?
}

void AddSubExpressionIdentifier() #void: {}
{
    MultDivExpressionIdentifier()
    (
        <PLUS> MultDivExpressionIdentifier() {jjtThis.op = Operator.ADD;} #Add(2)
        | <MINUS> MultDivExpressionIdentifier() #Sub(2)
    )*
}

void MultDivExpressionIdentifier() #void: {}
{
    BracketExpressionIdentifier()
    (
        <MULT> BracketExpressionIdentifier() #Mul(2)
        | <DIV> BracketExpressionIdentifier() #Div(2)
    )*
}

void BracketExpressionIdentifier() #void: {}
{
    DotExpressionIdentifier()
    (
        <OPEN_BRACKET>
        BracketExpressionIdentifier()
        <CLOSE_BRACKET>
    )?
}

void DotExpressionIdentifier() #void: {}
{
    ValuesIdentifier()
    (<DOT> DotFunc())?
}

void Values() #void: {Token t;} // simpler expressions
{
	t=<DIGIT>  {jjtThis.val = t.image;} #Int
	| t=<TRUE> {jjtThis.val = t.image;} #Boolean
	| t=<FALSE> {jjtThis.val = t.image;} #Boolean
	| t=<THIS> {jjtThis.val = t.image;} #This
	| <NEW> NewFunc()
	| ( <OPEN_PARENTHESIS> ExpressionIdentifier() <CLOSE_PARENTHESIS> )

}

void ValuesIdentifier() #void: {}
{
    <IDENTIFIER> #Identifier
    | Values()
}

void NewFunc() #New(1): {Token t;} //new within expression
{
    ( <INT> <OPEN_BRACKET>
     ExpressionIdentifier() #ArraySize(1)
     <CLOSE_BRACKET> )
    | ( t=<IDENTIFIER>  {jjtThis.val = t.image;} #Identifier(0)
     <OPEN_PARENTHESIS> <CLOSE_PARENTHESIS> )
}

void DotFunc() #void: {}
{
    <LENGTH> #Term
    | <IDENTIFIER> FuncArguments()
}

void FuncArguments() #void: {}
{
    <OPEN_PARENTHESIS>
        [ ExpressionIdentifier() (<COMMA> ExpressionIdentifier() )* ]
    <CLOSE_PARENTHESIS>
}
