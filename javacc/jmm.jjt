options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(jmm)

import java.io.*;
public class jmm {
    public static void main(String args[]) throws ParseException {

        if (args.length != 1) {
            System.err.println("Usage: java jmm <file_name>");
            return;
        }

        //Reading file with InputStream
        //The file is passed as argument (1st argument)
        File file = new File(args[0]);
        InputStream input;

        try {
            input = new FileInputStream(file);
        } catch (FileNotFoundException e) {
            System.out.println("File not Found.");
            return;
        }

        jmm parser = new jmm(input);
        parser.Program();
    }
}

PARSER_END(jmm)

// Symbols that must be skipped during the lexical analysis
SKIP :
{
	" " | "\r" | "\t"
}

// token definition (terminal symbols)
TOKEN:
{
    < INT : (["0" - "9"])+ >
    | < LF : "\n" >
    | < PV : ";" >
    | <IDENTIFIER_CLASS : ["A" - "Z"](["A" - "Z","a" - "z","_","0"-"9"])* >
    | <IDENTIFIER_VAR : (["A" - "Z"]|["a" - "z"])(["A" - "Z","a" - "z","_","0"-"9"])* >  //Identifier     is     one or more letters, digits, and underscores, starting with a letter
    | <IDENTIFIER : <IDENTIFIER_VAR> | <IDENTIFIER_CLASS>>
    | <TYPE : ("int" | "boolean" | "int[]" | <IDENTIFIER> ) >
    | <OPEN_BRACE: "{">
    | <CLOSE_BRACE: "}">
}

void Program(): {}
{
    //ImportDeclaration() ClassDeclaration()
    VarDeclaration()
}

void ImportDeclaration(): {}
{
    "import"
    | ""
}

void ClassDeclaration(): {}
{
    "class" <IDENTIFIER_CLASS>
    [ "extends" <IDENTIFIER_CLASS> ]
}

void VarDeclaration(): {Token t1, t2;}
{
    //var = TYPE , IDENTIFIER, ';'
    t1= <TYPE> {
        System.out.println("Token1= " + t1.image);
    }
    t2=<IDENTIFIER> {
        System.out.println("Token2 = " + t2.image);
    }
    <PV><LF>
}

void MethodDeclaration(): {}
{
    "public"
}

void Type(): {}
{
    "int"
}

void Statement(): {}
{
    <OPEN_BRACE>
}

void Expression(): {}
{
   Expr1() <LF>
}

void Expr1() #void: {}
{
   Expr2(1) [
   	("+" Expr2(1) #Add(2)
   	| "-" Expr2(1) #Sub(2)
   	)
   ]
}

void Expr2(int sign) #void: {} // 1: positive; -1: negative, because of the ‘-‘ unitary operator
{
   Expr3(sign)  [
   ("*" Expr3(1) #Mul(2) 
   | "/" Expr3(1) #Div(2)
   )
   
   ]
/*
   Expr3(sign) [
   ("*" #Mul(2)
   | "/" #Div(2)
   )
   Expr3(1)
   ]
   */
   
}

void Expr3(int sign) #void: {Token t;}
{
    t=<INT> {  jjtThis.val = sign *Integer.parseInt(t.image); } #Term
    | "-" Expr3(-1)
    | "(" Expr1() ")"
}
