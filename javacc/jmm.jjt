options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(jmm)

import java.io.*;
public class jmm {
    public static void main(String args[]) throws ParseException {

        if (args.length != 1) {
            System.err.println("Usage: java jmm <file_name>");
            return;
        }

        //Reading file with InputStream
        //The file is passed as argument (1st argument)
        File file = new File(args[0]);
        InputStream input;

        try {
            input = new FileInputStream(file);
        } catch (FileNotFoundException e) {
            System.out.println("File not Found.");
            return;
        }

        jmm parser = new jmm(input);
        parser.Program();
    }
}

PARSER_END(jmm)

// Symbols that must be skipped during the lexical analysis
SKIP :
{
	" " | "\r" | "\t" | "\n"
}

// token definition (terminal symbols)

//Types
TOKEN :
{
    <INT : "int">
    | <INT_ARR : "int[]">
    | <BOOL : "boolean">
    | <STRING : "String">
}

//Dedicated words
TOKEN :
{
    <CLASS : "class">
    | <EXTENDS : "extends">
    | <IMPORT : "import">
    | <PUBLIC : "public">
    | <RETURN : "return">
    | <STATIC : "static">
    | <VOID : "void">
    | <MAIN : "main">
    | <IF : "if">
    | <ELSE : "else">
    | <WHILE : "while">
    | <NEW : "new">
    | <THIS : "this">
    | <LENGTH : "length">
}

//Seperators
TOKEN :
{
    < PV : ";" >
    | <OPEN_BRACE: "{">
    | <CLOSE_BRACE: "}">
    | <OPEN_PARENTHESIS : "(">
    | <CLOSE_PARENTHESIS : ")">
    | <COMMA : ",">
	| <DOT : ".">
    | <OPEN_BRACKET : "[">
    | <CLOSE_BRACKET : "]">
}

//Operators
TOKEN :
{
    <NOT : "!">
    | <EQUALS : "=">
    | <LESS : "<">
    | <GREATER : ">">
    | <AND : "&&">
    | <MINUS : "-">
    | <PLUS : "+">
    | <MULT : "*">
    | <DIV : "/">
}

//Variables Values
TOKEN:
{
    <TRUE : "true">
    | <FALSE : "false">
    | <DIGIT : (["0"-"9"])+ >
    | <IDENTIFIER : <LETTER>(<LETTER>|<DIGIT>)* >  //Identifier is one or more letters, digits, and underscores, starting with a letter
    | <LETTER : ["a"-"z", "A"-"Z", "_"]>
}

void Program() #void: {}
{
    ImportDeclaration()
    ClassDeclaration()
}

void ImportDeclaration() #void: {}
{
    (
        <IMPORT>

        <PV>
    )*
}

// ############### CLASS DECLARATION #################
void ClassDeclaration() #void: {Token t1;}
{
    <CLASS> t1=<IDENTIFIER> {System.out.println("[New Class] Class name: " + t1.image);}
    [Extends()]
    ClassBody()
}

void Extends() #void: {Token ident;}
{
    <EXTENDS> ident=<IDENTIFIER> {
    System.out.println("\t[Previous Class] Extends: " + ident.image);
    }
}

void ClassBody() #void: {}
{
    <OPEN_BRACE>
        (VarDeclaration())*
        (<PUBLIC> (MainMethod() | MethodDeclaration()) )*
    <CLOSE_BRACE>
}

// ############### VAR DECLARATION #################
void VarDeclaration() #void: {Token t1;}
{
    ( t1=Type() | t1=<IDENTIFIER> )
    VarDeclaration1(t1)
}

void VarDeclaration1(Token t1) #void: {Token t2;}
{
    t2=<IDENTIFIER> {
        System.out.println("[New Var] Type: " + t1.image + " Identifier: " + t2.image);
    }
    <PV>
}

Token Type() #void: {Token t1;}
{
    (t1=<INT> | t1=<INT_ARR> | t1=<BOOL>)
    {return t1;}
}

// ############### MAIN METHOD #################
void MainMethod() #void: {}
{
    <STATIC> <VOID> <MAIN> MainMethodArguments() MainMethodBody()
}

void MainMethodArguments() #void: {Token t1;}
{
    <OPEN_PARENTHESIS>
        <STRING>
        <OPEN_BRACKET> <CLOSE_BRACKET>
        t1=<IDENTIFIER> {System.out.println("[Main Method] Argument name: " + t1.image);}
    <CLOSE_PARENTHESIS>
}

void MainMethodBody() #void: {}
{
    <OPEN_BRACE>
        MethodCode()
    <CLOSE_BRACE>
}

// ############### METHOD DECLARATION #################
void MethodDeclaration() #void: {Token t1, t2;}
{
   t1=Type() t2=<IDENTIFIER> { System.out.println("[New Method] Return Type: " + t1.image + " Identifier: " + t2.image); }
   MethodArguments()
   MethodBody()
}

void MethodArguments() #void: {}
{
    <OPEN_PARENTHESIS>
        [Type() <IDENTIFIER> (<COMMA> Type() <IDENTIFIER>)*]
    <CLOSE_PARENTHESIS>
}

void MethodBody() #void: {}
{
    <OPEN_BRACE>
        MethodCode()
        ReturnExpression()
    <CLOSE_BRACE>
}

void MethodCode() #void: {Token t1;}
{
    (
        ( t1=Type() VarDeclaration1(t1) )
        | t1=<IDENTIFIER>
            ( VarDeclaration1(t1) | MethodCode2(t1) )
    )*
    (Statement1())*
}

void MethodCode2(Token t1) #void: {}
{
    (
        <DOT> {System.out.println("[Dot Function]");} DotFunc()
        | ( Array() [Assignment1(t1)] )
    )
    <PV>
}

void ReturnExpression() #void: {}
{
    <RETURN> Expression() <PV> {System.out.println("[Return Expression]");}
}

// ############### STATEMENT #################
void Statement() #void: {Token t1;}
{
    Statement1()
    | ( t1=<IDENTIFIER> Assignment(t1) )
}

void Statement1() #void: {}
{
    ( <OPEN_BRACE> Statement() <CLOSE_BRACE> )
    | IfStatement()
    | WhileStatement()
    | ( Expression1() <PV> )
}

void IfStatement() #void: {}
{
    <IF> {System.out.println("[If]");}
    <OPEN_PARENTHESIS>
    Expression()
    <CLOSE_PARENTHESIS>
    Statement()
    <ELSE> {System.out.println("[Else]");}
    Statement()
}

void WhileStatement() #void: {}
{
     <WHILE> {System.out.println("[While]");}
     <OPEN_PARENTHESIS>
     Expression()
     <CLOSE_PARENTHESIS>
     Statement()
}

void Assignment(Token t1) #void: {}
{
    Array()
    Assignment1(t1)
}

void Assignment1(Token t1) #void: {}
{
    <EQUALS> {System.out.println("[New Assignment] Identifier: " + t1.image);} Expression() <PV>
}

void Array() #void: {}
{
    [ <OPEN_BRACKET> Expression() <CLOSE_BRACKET>]
}

// ############### EXPRESSION #################
void Expression() #void: {}
{
    Values()
    Expression2()
}

void Expression1() #void: {} // generic expression
{
    Values1()
    Expression2()
}

void Expression2() #void: {} // generic expression
{
    (
        ( <OPEN_BRACKET> Expression() <CLOSE_BRACKET> )
        | ( <DOT> DotFunc() )
        | Operations()
    )*
}

void Values() #void: {}
{
    <IDENTIFIER> | Values1()
}

void Values1() #void: {} // simpler expressions
{
	<DIGIT>
	| <TRUE>
	| <FALSE>
	| <THIS>
	| NewFunc()
	| <NOT> Expression()
	| <OPEN_PARENTHESIS> Expression() <CLOSE_PARENTHESIS>
}

void NewFunc() #void: {} //new within expression
{
	<NEW> {System.out.println("[New]");}
	(
	    ( <INT> <OPEN_BRACKET> Expression() <CLOSE_BRACKET> )
	    | ( <IDENTIFIER> <OPEN_PARENTHESIS> <CLOSE_PARENTHESIS> {System.out.println("[Function call]");} )
	)
}

void Operations() #void: {}
{
    <PLUS> Expression()
    | <MINUS> Expression()
    | <MULT> Expression()
    | <DIV> Expression()
    | <LESS> Expression()
    | <GREATER> Expression()
    | <AND> Expression()
}

void DotFunc() #void: {}
{
    <LENGTH>
    | <IDENTIFIER> FuncArguments()
}

void FuncArguments() #void: {}
{
    <OPEN_PARENTHESIS> {System.out.println("[Function call]");}
        [ Expression() (<COMMA> Expression() )* ]
    <CLOSE_PARENTHESIS>
}
